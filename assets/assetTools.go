package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"

	"os"
)

type resource struct {
	path, name string
}

func main() {
	// resources := []resource{
	// 	// resource{
	// 	// 	path: "assets/floor.png",
	// 	// 	name: "Floor_png",
	// 	// },
	// 	// resource{
	// 	// 	path: "assets/playerstand.png",
	// 	// 	name: "Player_stand_png",
	// 	// },
	// 	// resource{
	// 	// 	path: "assets/sword.png",
	// 	// 	name: "Sword_png",
	// 	// },
	// 	resource{
	// 		path: "8000paint.png",
	// 		name: "backgroundPng",
	// 	},
	// }

	// f, err := os.Create("assets.go")
	// if err != nil {
	// 	log.Fatal(err)
	// }
	// defer f.Close()

	// // fmt.Fprintln(f, "// This file is generated by save_resources.go")
	// fmt.Fprintln(f, "package main")
	// // fmt.Fprintln(f, "")
	// // fmt.Fprintln(f, "import \"log\"")
	// // fmt.Fprintln(f, "import \"io\"")
	// // fmt.Fprintln(f, "import \"os\"")
	// // fmt.Fprintln(f, "import \"io/ioutil\"")
	// fmt.Fprintln(f, "import \"bytes\"")
	// // fmt.Fprintln(f, "import \"github.com/pkg/errors\"")

	// for _, r := range resources {
	// 	content, err := ioutil.ReadFile(r.path)
	// 	if err != nil {
	// 		log.Fatal(err)
	// 	}
	// 	fmt.Fprintf(f, "var backgroundPng = []byte(")
	// 	fmt.Fprint(f, string(content))
	// 	fmt.Fprintf(f, `")`)
	// }

	if err := run(); err != nil {
		panic(err)
	}
}

var (
	inputFilename  = "8000paint.png"
	outputFilename = "assets.go"
	packageName    = "main"
	varName        = "backgroundPng"
	compress       = false
	buildtags      = ""
)

func write(w io.Writer, r io.Reader) error {
	if compress {
		compressed := &bytes.Buffer{}
		cw, err := gzip.NewWriterLevel(compressed, gzip.BestCompression)
		if err != nil {
			return err
		}
		if _, err := io.Copy(cw, r); err != nil {
			return err
		}
		cw.Close()
		r = compressed
	}

	bs, err := ioutil.ReadAll(r)
	if err != nil {
		return err
	}

	if _, err := fmt.Fprintln(w, "// Code generated by file2byteslice. DO NOT EDIT."); err != nil {
		return err
	}
	if _, err := fmt.Fprintln(w, "// (gofmt is fine after generating)"); err != nil {
		return err
	}
	if buildtags != "" {
		if _, err := fmt.Fprintln(w, "\n// +build "+buildtags); err != nil {
			return err
		}
	}
	if _, err := fmt.Fprintln(w, ""); err != nil {
		return err
	}
	if _, err := fmt.Fprintln(w, "package "+packageName); err != nil {
		return err
	}
	if _, err := fmt.Fprintln(w, ""); err != nil {
		return err
	}
	if _, err := fmt.Fprintf(w, "var %s = []byte(%q)\n", varName, string(bs)); err != nil {
		return err
	}
	return nil
}
func run() error {
	var out io.Writer
	if outputFilename != "" {
		f, err := os.Create(outputFilename)
		if err != nil {
			return err
		}
		defer f.Close()
		out = f
	} else {
		out = os.Stdout
	}

	var in io.Reader
	if inputFilename != "" {
		f, err := os.Open(inputFilename)
		if err != nil {
			return err
		}
		defer f.Close()
		in = f
	} else {
		in = os.Stdin
	}

	if err := write(out, in); err != nil {
		return err
	}

	return nil
}
